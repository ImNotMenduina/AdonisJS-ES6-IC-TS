"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validator_1 = global[Symbol.for('ioc.use')]("Adonis/Core/Validator");
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async signup({ request, response }) {
        const newPostSchema = Validator_1.schema.create({
            name: Validator_1.schema.string(),
            email: Validator_1.schema.string({}, [Validator_1.rules.email(), Validator_1.rules.unique({ table: 'users', column: 'email' })]),
            password: Validator_1.schema.string({}, [Validator_1.rules.confirmed('password_confirmation'), Validator_1.rules.minLength(8)]),
            password_confirmation: Validator_1.schema.string(),
        });
        const payload = await request.validate({
            schema: newPostSchema,
            messages: {
                'name.required': 'Insira seu nome',
                'email.required': 'Insira um e-mail válido',
                'password.required': 'Senhas não coincidem',
                'password_confirmation.required': 'Senhas não coincidem',
            },
        });
        const user = new User_1.default();
        user.name = payload.name;
        user.email = payload.email;
        user.password = payload.password;
        await user.save();
        return response.redirect('/');
    }
    async login({ request, auth, response }) {
        const validLogin = await request.validate({
            schema: Validator_1.schema.create({
                email: Validator_1.schema.string({}, [Validator_1.rules.email()]),
                password: Validator_1.schema.string({}, []),
            }),
            messages: {
                'email.required': 'Campo de email obrigatório',
                'password.required': 'Senha inválida',
            },
        });
        const email = validLogin.email;
        const password = validLogin.password;
        await auth.attempt(email, password);
        return response.redirect('/profile');
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLDJFQUEwRDtBQUMxRCxpRkFBa0M7QUFFbEMsTUFBcUIsY0FBYztJQUMxQixLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBdUI7UUFDNUQsTUFBTSxhQUFhLEdBQUcsa0JBQU0sQ0FBQyxNQUFNLENBQUM7WUFDbEMsSUFBSSxFQUFFLGtCQUFNLENBQUMsTUFBTSxFQUFFO1lBQ3JCLEtBQUssRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBSyxDQUFDLEtBQUssRUFBRSxFQUFFLGlCQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRTVGLFFBQVEsRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBSyxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLGlCQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0YscUJBQXFCLEVBQUUsa0JBQU0sQ0FBQyxNQUFNLEVBQUU7U0FDdkMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3JDLE1BQU0sRUFBRSxhQUFhO1lBRXJCLFFBQVEsRUFBRTtnQkFDUixlQUFlLEVBQUUsaUJBQWlCO2dCQUNsQyxnQkFBZ0IsRUFBRSx5QkFBeUI7Z0JBQzNDLG1CQUFtQixFQUFFLHNCQUFzQjtnQkFDM0MsZ0NBQWdDLEVBQUUsc0JBQXNCO2FBQ3pEO1NBQ0YsQ0FBQyxDQUFBO1FBV0YsTUFBTSxJQUFJLEdBQUcsSUFBSSxjQUFJLEVBQUUsQ0FBQTtRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUE7UUFDeEIsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFBO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQTtRQUNoQyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtRQUVqQixPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBdUI7UUFDakUsTUFBTSxVQUFVLEdBQUcsTUFBTSxPQUFPLENBQUMsUUFBUSxDQUFDO1lBQ3hDLE1BQU0sRUFBRSxrQkFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDcEIsS0FBSyxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFLLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFFekMsUUFBUSxFQUFFLGtCQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7YUFDaEMsQ0FBQztZQUVGLFFBQVEsRUFBRTtnQkFDUixnQkFBZ0IsRUFBRSw0QkFBNEI7Z0JBQzlDLG1CQUFtQixFQUFFLGdCQUFnQjthQUN0QztTQUNGLENBQUMsQ0FBQTtRQUtGLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUE7UUFDOUIsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQTtRQUNwQyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBRW5DLE9BQU8sUUFBUSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0NBQ0Y7QUE5REQsaUNBOERDIiwic291cmNlc0NvbnRlbnQiOlsiLy9pbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0BhZG9uaXNqcy9jb3JlL2J1aWxkL3N0YW5kYWxvbmUnXG5pbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSAnQGFkb25pc2pzL2NvcmUvYnVpbGQvc3RhbmRhbG9uZSdcbmltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgeyBzY2hlbWEsIHJ1bGVzIH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9WYWxpZGF0b3InXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInIC8vaW1wb3J0YW50ZSBpbXBvcnRhciBvIG1vZGVsLCBwb2lzIGVsZSBjdWlkYWRhcsOhIGRlIHRvZGFzIGFzIHF1ZXJ5aWVzIGRlbnRybyBkYSB0YWJsZSBubyBiYW5jbyBkZSBkYWRvc1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRoQ29udHJvbGxlciB7XG4gIHB1YmxpYyBhc3luYyBzaWdudXAoeyByZXF1ZXN0LCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgbmV3UG9zdFNjaGVtYSA9IHNjaGVtYS5jcmVhdGUoe1xuICAgICAgbmFtZTogc2NoZW1hLnN0cmluZygpLFxuICAgICAgZW1haWw6IHNjaGVtYS5zdHJpbmcoe30sIFtydWxlcy5lbWFpbCgpLCBydWxlcy51bmlxdWUoeyB0YWJsZTogJ3VzZXJzJywgY29sdW1uOiAnZW1haWwnIH0pXSksXG5cbiAgICAgIHBhc3N3b3JkOiBzY2hlbWEuc3RyaW5nKHt9LCBbcnVsZXMuY29uZmlybWVkKCdwYXNzd29yZF9jb25maXJtYXRpb24nKSwgcnVsZXMubWluTGVuZ3RoKDgpXSksXG4gICAgICBwYXNzd29yZF9jb25maXJtYXRpb246IHNjaGVtYS5zdHJpbmcoKSxcbiAgICB9KVxuXG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoe1xuICAgICAgc2NoZW1hOiBuZXdQb3N0U2NoZW1hLFxuXG4gICAgICBtZXNzYWdlczoge1xuICAgICAgICAnbmFtZS5yZXF1aXJlZCc6ICdJbnNpcmEgc2V1IG5vbWUnLFxuICAgICAgICAnZW1haWwucmVxdWlyZWQnOiAnSW5zaXJhIHVtIGUtbWFpbCB2w6FsaWRvJyxcbiAgICAgICAgJ3Bhc3N3b3JkLnJlcXVpcmVkJzogJ1NlbmhhcyBuw6NvIGNvaW5jaWRlbScsXG4gICAgICAgICdwYXNzd29yZF9jb25maXJtYXRpb24ucmVxdWlyZWQnOiAnU2VuaGFzIG7Do28gY29pbmNpZGVtJyxcbiAgICAgIH0sXG4gICAgfSlcbiAgICAvKiAgdHJ5XG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhd2FpdCByZXF1ZXN0LnZhbGlkYXRlKHtzY2hlbWEgOiBuZXdQb3N0U2NoZW1hfSlcblxuICAgICAgICB9IGNhdGNoKGVycm9yKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXNwb25zZS5iYWRSZXF1ZXN0KGVycm9yLm1lc3NhZ2VzKVxuICAgICAgICB9XG4gICAgICAgICAqL1xuXG4gICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKClcbiAgICB1c2VyLm5hbWUgPSBwYXlsb2FkLm5hbWVcbiAgICB1c2VyLmVtYWlsID0gcGF5bG9hZC5lbWFpbFxuICAgIHVzZXIucGFzc3dvcmQgPSBwYXlsb2FkLnBhc3N3b3JkXG4gICAgYXdhaXQgdXNlci5zYXZlKClcblxuICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdCgnLycpXG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbG9naW4oeyByZXF1ZXN0LCBhdXRoLCByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgY29uc3QgdmFsaWRMb2dpbiA9IGF3YWl0IHJlcXVlc3QudmFsaWRhdGUoe1xuICAgICAgc2NoZW1hOiBzY2hlbWEuY3JlYXRlKHtcbiAgICAgICAgZW1haWw6IHNjaGVtYS5zdHJpbmcoe30sIFtydWxlcy5lbWFpbCgpXSksXG5cbiAgICAgICAgcGFzc3dvcmQ6IHNjaGVtYS5zdHJpbmcoe30sIFtdKSxcbiAgICAgIH0pLFxuXG4gICAgICBtZXNzYWdlczoge1xuICAgICAgICAnZW1haWwucmVxdWlyZWQnOiAnQ2FtcG8gZGUgZW1haWwgb2JyaWdhdMOzcmlvJyxcbiAgICAgICAgJ3Bhc3N3b3JkLnJlcXVpcmVkJzogJ1NlbmhhIGludsOhbGlkYScsXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICAvL0ZldGNoIG8gdXN1YXJpb1xuXG4gICAgLy9jb25zdCB1c2VyID0gYXdhaXQgVXNlci5maW5kQnlPckZhaWwoJ2VtYWlsJyAsdmFsaWRMb2dpbi5lbWFpbClcbiAgICBjb25zdCBlbWFpbCA9IHZhbGlkTG9naW4uZW1haWxcbiAgICBjb25zdCBwYXNzd29yZCA9IHZhbGlkTG9naW4ucGFzc3dvcmRcbiAgICBhd2FpdCBhdXRoLmF0dGVtcHQoZW1haWwsIHBhc3N3b3JkKVxuXG4gICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCcvcHJvZmlsZScpXG4gIH1cbn1cbiJdfQ==